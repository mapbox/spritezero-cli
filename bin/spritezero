#!/usr/bin/env node

var spritezero = require('@mapbox/spritezero');
var fs = require('fs');
var path = require('path');
var glob = require('glob');
var argv = require('minimist')(process.argv.slice(2), {
  default: { _: ['.', '.'] },
  boolean: ['retina', 'unique', 'h', 'help']
});
 
function showHelp() {
  console.log(`
    spritezero
    Generate sprite sheets for maps and the web using SVG files as input
    spritezero [output filename] [input directory]

    --retina      shorthand for --ratio=2
    --ratio=[n]   pixel ratio
    --unique      map identical images to multiple names
   `);
}

if (argv.help || argv._.length < 2) {
  showHelp();
  /* istanbul ignore next */
  process.exit(1);
}

var ratio = 1;
var unique = false;

if (argv.retina) {
  ratio = 2;
} else if (argv.ratio) {
  ratio = parseFloat(argv.ratio);
}

if (argv.unique) {
  unique = true;
}

var outfile = argv._[0];
var input = argv._[1];

function sortById(a, b) {
  return b.id < a.id;
}

const buffers = glob
  .sync(input + '/*.svg')
  .map((f) => ({
    svg: fs.readFileSync(f),
    id: path.basename(f).replace('.svg', '')
  }))
  .sort(sortById);

var genLayout = unique ? spritezero.generateLayoutUnique : spritezero.generateLayout;
genLayout({ imgs: buffers, pixelRatio: ratio, format: true }, saveLayout);
genLayout({ imgs: buffers, pixelRatio: ratio, format: false }, saveImage);

function saveLayout(err, formattedLayout) {
  if (err) throw err;
  fs.writeFileSync(outfile + '.json', JSON.stringify(formattedLayout, undefined, '  '));
}

function saveImage(err, layout) {
  if (err) throw err;
  spritezero.generateImage(layout, function (err, image) {
    if (err) throw err;
    fs.writeFileSync(outfile + '.png', image, function (err) {
      if (err) throw err;
    });
  });
}
